openapi: 3.0.1
info:
  title: PKU-cloud VM manage
  description: RESTful public-facing API. The API is accessible through HTTP calss
    on specific URLs carrying JSON modeled data.
  contact:
    email: xuehaonan27@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0-dev
servers:
- url: http://localhost/
paths:
  /api/v1:
    get:
      summary: Get index page of the cloud
      description: Returns index page of the cloud.
      operationId: getIndexPage
      responses:
        "200":
          description: The cloud information
          content:
            text/html:
              schema:
                type: string
                format: binary
  /api/v1/vm:
    get:
      summary: Get the overview VM page of the user by user_id
      description: Returns overview VM page of the user
      operationId: getVmPage
      parameters:
      - name: user_id
        in: query
        description: The `user_id` of the user
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The VM information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VmViewInfo'
        default:
          description: fail to fetch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      summary: create a new machine for user
      description: create a new machine for user
      parameters:
      - name: user_id
        in: query
        description: The `user_id` of the user
        required: true
        schema:
          type: string
      - name: vmid
        in: query
        description: The `vmid` of specified machine
        required: true
        schema:
          type: string
      requestBody:
        description: Config for microVM
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Config'
      responses:
        "201":
          description: Created
        default:
          description: Fail to create VM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /api/v1/vm/{vmid}:
    get:
      summary: Get VM status
      description: Get VM status
      operationId: getVmStatus
      parameters:
      - name: user_id
        in: query
        description: The `user_id` of the user
        required: true
        schema:
          type: string
      - name: vmid
        in: path
        description: The `vmid` of the machine
        required: true
        schema:
          type: string
      responses:
        "200":
          description: machine status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceInfo'
        default:
          description: fail to modify
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

    put:
      summary: Modify metadata of the VM by user_id and vmid
      description: modify metadata of the VM
      operationId: modifyVmMetadata
      parameters:
      - name: user_id
        in: query
        description: The `user_id` of the user
        required: true
        schema:
          type: string
      - name: vmid
        in: query
        description: The `vmid` of specified machine
        required: true
        schema:
          type: string
      - name: metadata
        in: query
        description: metadata of the VM
        required: false
        schema:
          type: object
      responses:
        "204":
          description: Metadata modified
        default:
          description: fail to modify
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/v1/vm/{vmid}/power_state:
    put:
      summary: Change power state of `vmid`
      description: Change power state of `vmid`
      operationId: operateVM
      parameters:
      - name: user_id
        in: query
        description: The `user_id` of the user
        required: true
        schema:
          type: string
      - name: vmid
        in: path
        description: The `vmid` of the machine
        required: true
        schema:
          type: string
      - name: operation
        in: query
        description: Operation for the machine
        required: true
        schema:
          type: string
          enum: ["start", "pause", "resume", "stop"]
      responses:
        "200":
            description: Vm operated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InstanceInfo'
        default:
          description: Fail to create VM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/v1/vm/delete:
    delete:
      summary: Delete the `vmid`
      description: Delete the VM
      operationId: deleteVM
      parameters:
      - name: user_id
        in: query
        description: The unique id of the user
        required: true
        schema:
          type: string
      - name: vmid
        in: query
        description: The unique id of the virtual machine
        required: true
        schema:
          type: string
      responses:
        "204":
          description: VM deleted
        default:
          description: Fail to delete VM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/v1/vm/{vmid}/snapshots/{snapshot_id}:
    get:
      summary: Get snapshot detail of VM
      description: Get snapshot detail of specified VM
      operationId: describeSnapshotsById
      parameters:
      - name: user_id
        in: query
        description: The unique id of the user
        required: true
        schema:
          type: string
      - name: vmid
        in: path
        description: The unique id of the virtual machine
        required: true
        schema:
          type: string
      - name: snapshot_id
        in: path
        description: The unique id of the snapshot
        required: true
        schema:
          type: string
      responses:
        "200":
          description: All snapshots for the VM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceInfo'
        default:
          description: Fail to describe snapshots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/v1/vm/{vmid}/snapshots:
    post:
      summary: Create snapshot for VM
      description: Create snapshot for VM
      operationId: createSnapshot
      parameters:
      - name: user_id
        in: query
        description: The unique id of the user
        required: true
        schema:
          type: string
      - name: vmid
        in: path
        description: The unique id of the virtual machine
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Snapshot created
        default:
          description: Fail to create snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/v1/vm/{vmid}/snapshots/{snapshot_id}/restore:
    post:
      summary: Restore VM with snapshot
      description: Restore VM with snapshot
      operationId: restoreVmWithSnapshot
      parameters:
        - name: user_id
          in: query
          description: The unique id of the user
          required: true
          schema:
            type: string
        - name: vmid
          in: path
          description: The unique id of the virtual machine
          required: true
          schema:
            type: string
        - name: snapshot_id
          in: path
          description: The unique id of the snapshot
          required: true
          schema:
            type: string
      responses:
        "204":
          description: VM restored
        default:
          description: Fail to create snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
components:
  schemas:
    ErrorModel:
      required:
      - code
      - message
      type: object
      properties:
        message:
          type: string
        code:
          maximum: 600
          minimum: 100
          type: integer
    Config:
      type: object
      required:
      - machine_cfg
      properties:
        socket_path:
          type: string
        log_path:
          type: string
        log_fifo:
          type: string
        log_level:
          type: string
          enum: ["Error", "Warning", "Info", "Debug"]
        log_clear:
          type: boolean
        metrics_path:
          type: string
        metrics_fifo:
          type: string
        metrics_clear:
          type: boolean
        initrd_path:
          type: string
        kernel_args:
          type: string
        drives:
          type: array
          items:
            $ref: '#/components/schemas/Drive'
        network_interfaces:
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
        fifo_log_writer:
          type: string
        vsock_devices:
          type: array
          items:
            $ref: '#/components/schemas/Vsock'
        machine_cfg:
          $ref: '#/components/schemas/MachineConfiguration'
        disable_validation:
          type: boolean
        jailer_cfg:
          $ref: '#/components/schemas/JailerConfig'
        vmid:
          type: string
          format: uuid
        net_ns:
          type: string
        network_clear:
          type: boolean
        forward_signals:
          type: array
          items:
            type: integer
        seccomp_level:
          type: integer
          enum: [0, 1, 2]
        mmds_address:
          type: string
          format: ipv4
        balloon:
          $ref: '#/components/schemas/Balloon'
        init_metadata:
          type: object
    JailerConfig:
      type: object
      properties:
        gid:
          type: integer
          format: int32
        uid:
          type: integer
          format: int32
        id:
          type: string
        numa_node:
          type: integer
        exec_file:
          type: string
          format: path
        jailer_binary:
          type: string
          format: path
        chroot_base_dir:
          type: string
          format: path
        daemonize:
          type: boolean
    VmViewInfo:
      required:
      - kernel
      - storage
      - user_id
      - vm_config
      - vm_info
      - vmid
      type: object
      properties:
        user_id:
          type: string
          description: user uuid of this vm
        vmid:
          type: string
          description: vm uuid of this vm
        kernel:
          type: string
          description: kernel name of this vm
        storage:
          $ref: '#/components/schemas/StorageDescriptor'
        vm_info:
          $ref: '#/components/schemas/InstanceInfo'
        vm_config:
          $ref: '#/components/schemas/FullVmConfiguration'
      description: Virtual machien information
    StorageDescriptor:
      required:
      - path
      - size
      type: object
      properties:
        size:
          type: integer
          description: size of this storage
        path:
          type: string
          description: path to the storage
      description: Storage descriptor for a VM
    Balloon:
      required:
      - amount_mib
      - deflate_on_oom
      type: object
      properties:
        amount_mib:
          type: integer
          description: Target balloon size in MiB.
        deflate_on_oom:
          type: boolean
          description: Whether the balloon should deflate when the guest has memory
            pressure.
        stats_polling_interval_s:
          type: integer
          description: Interval in seconds between refreshing statistics. A non-zero
            value will enable the statistics. Defaults to 0.
      description: Balloon device descriptor.
    BalloonUpdate:
      required:
      - amount_mib
      type: object
      properties:
        amount_mib:
          type: integer
          description: Target balloon size in MiB.
      description: Balloon device descriptor.
    BalloonStats:
      required:
      - actual_mib
      - actual_pages
      - target_mib
      - target_pages
      type: object
      properties:
        target_pages:
          type: integer
          description: Target number of pages the device aims to hold.
        actual_pages:
          type: integer
          description: Actual number of pages the device is holding.
        target_mib:
          type: integer
          description: Target amount of memory (in MiB) the device aims to hold.
        actual_mib:
          type: integer
          description: Actual amount of memory (in MiB) the device is holding.
        swap_in:
          type: integer
          description: The amount of memory that has been swapped in (in bytes).
          format: int64
        swap_out:
          type: integer
          description: The amount of memory that has been swapped out to disk (in
            bytes).
          format: int64
        major_faults:
          type: integer
          description: The number of major page faults that have occurred.
          format: int64
        minor_faults:
          type: integer
          description: The number of minor page faults that have occurred.
          format: int64
        free_memory:
          type: integer
          description: The amount of memory not being used for any purpose (in bytes).
          format: int64
        total_memory:
          type: integer
          description: The total amount of memory available (in bytes).
          format: int64
        available_memory:
          type: integer
          description: "An estimate of how much memory is available (in bytes) for\
            \ starting new applications, without pushing the system to swap."
          format: int64
        disk_caches:
          type: integer
          description: "The amount of memory, in bytes, that can be quickly reclaimed\
            \ without additional I/O. Typically these pages are used for caching files\
            \ from disk."
          format: int64
        hugetlb_allocations:
          type: integer
          description: The number of successful hugetlb page allocations in the guest.
          format: int64
        hugetlb_failures:
          type: integer
          description: The number of failed hugetlb page allocations in the guest.
          format: int64
      description: Describes the balloon device statistics.
    BalloonStatsUpdate:
      required:
      - stats_polling_interval_s
      type: object
      properties:
        stats_polling_interval_s:
          type: integer
          description: Interval in seconds between refreshing statistics.
      description: "Update the statistics polling interval, with the first statistics\
        \ update scheduled immediately. Statistics cannot be turned on/off after boot."
    BootSource:
      required:
      - kernel_image_path
      type: object
      properties:
        boot_args:
          type: string
          description: Kernel boot arguments
        initrd_path:
          type: string
          description: Host level path to the initrd image used to boot the guest
        kernel_image_path:
          type: string
          description: Host level path to the kernel image used to boot the guest
      description: Boot source descriptor.
    CpuTemplate:
      type: string
      description: The CPU Template defines a set of flags to be disabled from the
        microvm so that the features exposed to the guest are the same as in the selected
        instance type. This parameter has been deprecated and it will be removed in
        future Firecracker release.
      default: None
      enum:
      - C3
      - T2
      - T2S
      - T2CL
      - T2A
      - V1N1
      - None
    CpuConfig:
      type: string
      properties:
        cpuid_modifiers:
          type: object
          properties: {}
          description: A collection of CPUIDs to be modified. (x86_64)
        msr_modifiers:
          type: object
          properties: {}
          description: A collection of model specific registers to be modified. (x86_64)
        reg_modifiers:
          type: object
          properties: {}
          description: A collection of registers to be modified. (aarch64)
      description: The CPU configuration template defines a set of bit maps as modifiers
        of flags accessed by register to be disabled/enabled for the microvm.
    Drive:
      required:
      - drive_id
      - is_root_device
      type: object
      properties:
        drive_id:
          type: string
        partuuid:
          type: string
          description: Represents the unique id of the boot partition of this device.
            It is optional and it will be taken into account only if the is_root_device
            field is true.
        is_root_device:
          type: boolean
        cache_type:
          type: string
          description: Represents the caching strategy for the block device.
          default: Unsafe
          enum:
          - Unsafe
          - Writeback
        is_read_only:
          type: boolean
          description: Is block read only. This field is required for virtio-block
            config and should be omitted for vhost-user-block configuration.
        path_on_host:
          type: string
          description: Host level path for the guest drive. This field is required
            for virtio-block config and should be omitted for vhost-user-block configuration.
        rate_limiter:
          $ref: '#/components/schemas/RateLimiter'
        io_engine:
          type: string
          description: Type of the IO engine used by the device. "Async" is supported
            on host kernels newer than 5.10.51. This field is optional for virtio-block
            config and should be omitted for vhost-user-block configuration.
          default: Sync
          enum:
          - Sync
          - Async
        socket:
          type: string
          description: Path to the socket of vhost-user-block backend. This field
            is required for vhost-user-block config should be omitted for virtio-block
            configuration.
    FullVmConfiguration:
      type: object
      properties:
        balloon:
          $ref: '#/components/schemas/Balloon'
        drives:
          type: array
          description: Configurations for all block devices.
          items:
            $ref: '#/components/schemas/Drive'
        boot-source:
          $ref: '#/components/schemas/BootSource'
        logger:
          $ref: '#/components/schemas/Logger'
        machine-config:
          $ref: '#/components/schemas/MachineConfiguration'
        metrics:
          $ref: '#/components/schemas/Metrics'
        mmds-config:
          $ref: '#/components/schemas/MmdsConfig'
        network-interfaces:
          type: array
          description: Configurations for all net devices.
          items:
            $ref: '#/components/schemas/NetworkInterface'
        vsock:
          $ref: '#/components/schemas/Vsock'
    InstanceInfo:
      required:
      - app_name
      - id
      - state
      - vmm_version
      type: object
      properties:
        app_name:
          type: string
          description: Application name.
        id:
          type: string
          description: MicroVM / instance ID.
        state:
          type: string
          description: "The current detailed state (Not started, Running, Paused)\
            \ of the Firecracker instance. This value is read-only for the control-plane."
          enum:
          - Not started
          - Running
          - Paused
        vmm_version:
          type: string
          description: MicroVM hypervisor build version.
      description: Describes MicroVM instance information.
    Logger:
      type: object
      properties:
        level:
          type: string
          description: Set the level. The possible values are case-insensitive.
          default: Info
          enum:
          - Error
          - Warning
          - Info
          - Debug
          - Trace
        log_path:
          type: string
          description: Path to the named pipe or file for the human readable log output.
        show_level:
          type: boolean
          description: Whether or not to output the level in the logs.
          default: false
        show_log_origin:
          type: boolean
          description: Whether or not to include the file path and line number of
            the log's origin.
          default: false
        module:
          type: string
          description: The module path to filter log messages by.
          example: api_server::request
      description: Describes the configuration option for the logging capability.
    MachineConfiguration:
      required:
      - mem_size_mib
      - vcpu_count
      type: object
      properties:
        cpu_template:
          $ref: '#/components/schemas/CpuTemplate'
        smt:
          type: boolean
          description: Flag for enabling/disabling simultaneous multithreading. Can
            be enabled only on x86.
          default: false
        mem_size_mib:
          type: integer
          description: Memory size of VM
        track_dirty_pages:
          type: boolean
          description: "Enable dirty page tracking. If this is enabled, then incremental\
            \ guest memory snapshots can be created. These belong to diff snapshots,\
            \ which contain, besides the microVM state, only the memory dirtied since\
            \ a previous snapshot. Full snapshots each contain a full copy of the\
            \ guest memory."
          default: false
        vcpu_count:
          maximum: 32
          minimum: 1
          type: integer
          description: Number of vCPUs (either 1 or an even number)
      description: "Describes the number of vCPUs, memory size, SMT capabilities and\
        \ the CPU template."
    MemoryBackend:
      required:
      - backend_path
      - backend_type
      type: object
      properties:
        backend_type:
          type: string
          enum:
          - File
          - Uffd
        backend_path:
          type: string
          description: Based on 'backend_type' it is either 1) Path to the file that
            contains the guest memory to be loaded 2) Path to the UDS where a process
            is listening for a UFFD initialization control payload and open file descriptor
            that it can use to serve this process's guest memory page faults
    Metrics:
      required:
      - metrics_path
      type: object
      properties:
        metrics_path:
          type: string
          description: Path to the named pipe or file where the JSON-formatted metrics
            are flushed.
      description: Describes the configuration option for the metrics capability.
    MmdsConfig:
      required:
      - network_interfaces
      type: object
      properties:
        version:
          type: string
          description: Enumeration indicating the MMDS version to be configured.
          default: V1
          enum:
          - V1
          - V2
        network_interfaces:
          type: array
          description: "List of the network interface IDs capable of forwarding packets\
            \ to the MMDS. Network interface IDs mentioned must be valid at the time\
            \ of this request. The net device model will reply to HTTP GET requests\
            \ sent to the MMDS address via the interfaces mentioned. In this case,\
            \ both ARP requests and TCP segments heading to `ipv4_address` are intercepted\
            \ by the device model, and do not reach the associated TAP device."
          items:
            type: string
        ipv4_address:
          type: string
          description: A valid IPv4 link-local address.
          format: "169.254.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])"
          default: 169.254.169.254
      description: Defines the MMDS configuration.
    MmdsContentsObject:
      type: object
      description: Describes the contents of MMDS in JSON format.
    NetworkInterface:
      required:
      - host_dev_name
      - iface_id
      type: object
      properties:
        guest_mac:
          type: string
        host_dev_name:
          type: string
          description: Host level path for the guest network interface
        iface_id:
          type: string
        rx_rate_limiter:
          $ref: '#/components/schemas/RateLimiter'
        tx_rate_limiter:
          $ref: '#/components/schemas/RateLimiter'
      description: Defines a network interface.
    PartialDrive:
      required:
      - drive_id
      type: object
      properties:
        drive_id:
          type: string
        path_on_host:
          type: string
          description: Host level path for the guest drive. This field is optional
            for virtio-block config and should be omitted for vhost-user-block configuration.
        rate_limiter:
          $ref: '#/components/schemas/RateLimiter'
    PartialNetworkInterface:
      required:
      - iface_id
      type: object
      properties:
        iface_id:
          type: string
        rx_rate_limiter:
          $ref: '#/components/schemas/RateLimiter'
        tx_rate_limiter:
          $ref: '#/components/schemas/RateLimiter'
      description: "Defines a partial network interface structure, used to update\
        \ the rate limiters for that interface, after microvm start."
    RateLimiter:
      type: object
      properties:
        bandwidth:
          $ref: '#/components/schemas/TokenBucket'
        ops:
          $ref: '#/components/schemas/TokenBucket'
      description: Defines an IO rate limiter with independent bytes/s and ops/s limits.
        Limits are defined by configuring each of the _bandwidth_ and _ops_ token
        buckets. This field is optional for virtio-block config and should be omitted
        for vhost-user-block configuration.
    SnapshotCreateParams:
      required:
      - mem_file_path
      - snapshot_path
      type: object
      properties:
        mem_file_path:
          type: string
          description: Path to the file that will contain the guest memory.
        snapshot_path:
          type: string
          description: Path to the file that will contain the microVM state.
        snapshot_type:
          type: string
          description: "Type of snapshot to create. It is optional and by default,\
            \ a full snapshot is created."
          enum:
          - Full
          - Diff
    SnapshotLoadParams:
      required:
      - snapshot_path
      type: object
      properties:
        enable_diff_snapshots:
          type: boolean
          description: Enable support for incremental (diff) snapshots by tracking
            dirty guest pages.
        mem_file_path:
          type: string
          description: Path to the file that contains the guest memory to be loaded.
            It is only allowed if `mem_backend` is not present. This parameter has
            been deprecated and it will be removed in future Firecracker release.
        mem_backend:
          $ref: '#/components/schemas/MemoryBackend'
        snapshot_path:
          type: string
          description: Path to the file that contains the microVM state to be loaded.
        resume_vm:
          type: boolean
          description: "When set to true, the vm is also resumed if the snapshot load\
            \ is successful."
      description: Defines the configuration used for handling snapshot resume. Exactly
        one of the two `mem_*` fields must be present in the body of the request.
    TokenBucket:
      required:
      - refill_time
      - size
      type: object
      properties:
        one_time_burst:
          minimum: 0
          type: integer
          description: The initial size of a token bucket.
          format: int64
        refill_time:
          minimum: 0
          type: integer
          description: The amount of milliseconds it takes for the bucket to refill.
          format: int64
        size:
          minimum: 0
          type: integer
          description: The total number of tokens this bucket can hold.
          format: int64
      description: "Defines a token bucket with a maximum capacity (size), an initial\
        \ burst size (one_time_burst) and an interval for refilling purposes (refill_time).\
        \ The refill-rate is derived from size and refill_time, and it is the constant\
        \ rate at which the tokens replenish. The refill process only starts happening\
        \ after the initial burst budget is consumed. Consumption from the token bucket\
        \ is unbounded in speed which allows for bursts bound in size by the amount\
        \ of tokens available. Once the token bucket is empty, consumption speed is\
        \ bound by the refill_rate."
    Vm:
      required:
      - state
      type: object
      properties:
        state:
          type: string
          enum:
          - Paused
          - Resumed
      description: Defines the microVM running state. It is especially useful in the
        snapshotting context.
    EntropyDevice:
      type: object
      properties:
        rate_limiter:
          $ref: '#/components/schemas/RateLimiter'
      description: Defines an entropy device.
    Vsock:
      required:
      - guest_cid
      - uds_path
      type: object
      properties:
        guest_cid:
          minimum: 3
          type: integer
          description: Guest Vsock CID
        uds_path:
          type: string
          description: "Path to UNIX domain socket, used to proxy vsock connections."
        vsock_id:
          type: string
          description: This parameter has been deprecated and it will be removed in
            future Firecracker release.
      description: "Defines a vsock device, backed by a set of Unix Domain Sockets,\
        \ on the host side. For host-initiated connections, Firecracker will be listening\
        \ on the Unix socket identified by the path `uds_path`. Firecracker will create\
        \ this socket, bind and listen on it. Host-initiated connections will be performed\
        \ by connection to this socket and issuing a connection forwarding request\
        \ to the desired guest-side vsock port (i.e. `CONNECT 52\\n`, to connect to\
        \ port 52). For guest-initiated connections, Firecracker will expect host\
        \ software to be bound and listening on Unix sockets at `uds_path_<PORT>`.\
        \ E.g. \"/path/to/host_vsock.sock_52\" for port number 52."
x-original-swagger-version: "2.0"
